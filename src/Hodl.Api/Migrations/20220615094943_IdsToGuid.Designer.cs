// <auto-generated />
using System;
using Hodl.Api.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Hodl.Api.Migrations
{
    [DbContext(typeof(HodlDbContext))]
    [Migration("20220615094943_IdsToGuid")]
    partial class IdsToGuid
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CryptoCategories", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CryptoId")
                        .HasColumnType("uuid");

                    b.HasKey("CategoryId", "CryptoId");

                    b.HasIndex("CryptoId");

                    b.ToTable("CryptoCategories");
                });

            modelBuilder.Entity("Hodl.Api.Domain.AppChangeLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NewRecord")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedRoleName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("OldRecord")
                        .HasColumnType("text");

                    b.Property<string>("TableName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ChangeLog");
                });

            modelBuilder.Entity("Hodl.Api.Domain.AppConfig", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedRoleName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Name");

                    b.ToTable("AppConfigs");
                });

            modelBuilder.Entity("Hodl.Api.Domain.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("c1a6e520-01f1-4fed-85e1-a2a358d7fb02"),
                            ConcurrencyStamp = "9117e2f0-d777-4ca9-8f17-568b0c0f9b8e",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("526198db-4e9f-4200-bbf9-82ecfe39330c"),
                            ConcurrencyStamp = "054f1237-4de3-4f02-afb9-036b418a8ab6",
                            Name = "Trader",
                            NormalizedName = "TRADER"
                        },
                        new
                        {
                            Id = new Guid("d12fa1e4-409f-42f6-900c-dbd8295ca1cf"),
                            ConcurrencyStamp = "bf23238e-2cc8-49f0-86a4-e5b9c42a31c8",
                            Name = "LeadTrader",
                            NormalizedName = "LEADTRADER"
                        },
                        new
                        {
                            Id = new Guid("bc1bd304-deee-4ecb-b00e-420484984c83"),
                            ConcurrencyStamp = "a9231ef4-1c1e-46f3-88ea-2fc5a469bfb0",
                            Name = "Sales",
                            NormalizedName = "SALES"
                        },
                        new
                        {
                            Id = new Guid("0aff7b76-053d-43d9-aa1b-308df84c32e1"),
                            ConcurrencyStamp = "7c8a99d3-2532-448b-b372-307f8c32d11f",
                            Name = "HeadSales",
                            NormalizedName = "HEADSALES"
                        },
                        new
                        {
                            Id = new Guid("420d65a9-f385-4f19-9c25-b48eaa4ee2dd"),
                            ConcurrencyStamp = "d1d2f141-e00a-416f-9450-c97742f9d58e",
                            Name = "Client",
                            NormalizedName = "CLIENT"
                        });
                });

            modelBuilder.Entity("Hodl.Api.Domain.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Hodl.Api.Domain.Bank", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BankCode")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("character varying(4)");

                    b.Property<string>("Country")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<string>("Url")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.ToTable("Banks");
                });

            modelBuilder.Entity("Hodl.Api.Domain.BankAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BIC")
                        .HasMaxLength(11)
                        .HasColumnType("character varying(11)");

                    b.Property<Guid>("BankId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FundId")
                        .HasColumnType("uuid");

                    b.Property<string>("HolderName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("IBAN")
                        .HasMaxLength(34)
                        .HasColumnType("character varying(34)");

                    b.HasKey("Id");

                    b.HasIndex("BankId");

                    b.HasIndex("FundId");

                    b.ToTable("BankAccounts");
                });

            modelBuilder.Entity("Hodl.Api.Domain.BankBalance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Balance")
                        .HasColumnType("numeric");

                    b.Property<Guid>("BankAccountId")
                        .HasColumnType("uuid");

                    b.Property<string>("CurrencyCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyCode");

                    b.HasIndex("BankAccountId", "CurrencyCode", "TimeStamp");

                    b.ToTable("BankBalances");
                });

            modelBuilder.Entity("Hodl.Api.Domain.BlockchainNetwork", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<long>("ChainID")
                        .HasColumnType("bigint");

                    b.Property<string>("ExplorerUrl")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("RPCUrl")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("Id");

                    b.ToTable("BlockchainNetworks");
                });

            modelBuilder.Entity("Hodl.Api.Domain.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Group")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.HasKey("Id");

                    b.HasIndex("Group", "Name");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Hodl.Api.Domain.CryptoCurrency", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<byte>("Decimals")
                        .HasColumnType("smallint");

                    b.Property<byte[]>("Icon")
                        .HasColumnType("bytea");

                    b.Property<bool>("IsFiat")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)");

                    b.HasKey("Id");

                    b.HasIndex("Symbol", "Name")
                        .IsUnique();

                    b.ToTable("CryptoCurrencies");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fb3194c2-e732-4219-89b9-bc63eea2a861"),
                            Active = true,
                            Decimals = (byte)8,
                            IsFiat = false,
                            IsLocked = false,
                            Name = "Bitcoin",
                            Symbol = "BTC"
                        },
                        new
                        {
                            Id = new Guid("796923d5-a790-40d1-9074-c8fe3c25d049"),
                            Active = true,
                            Decimals = (byte)18,
                            IsFiat = false,
                            IsLocked = false,
                            Name = "Ethereum",
                            Symbol = "ETH"
                        });
                });

            modelBuilder.Entity("Hodl.Api.Domain.Currency", b =>
                {
                    b.Property<string>("ISOCode")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<byte>("Decimals")
                        .HasColumnType("smallint");

                    b.Property<bool>("Default")
                        .HasColumnType("boolean");

                    b.Property<string>("Location")
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)");

                    b.Property<string>("Name")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<string>("Symbol")
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)");

                    b.HasKey("ISOCode");

                    b.ToTable("Currencies");

                    b.HasData(
                        new
                        {
                            ISOCode = "EUR",
                            Active = true,
                            Decimals = (byte)2,
                            Default = true,
                            Location = "Europe",
                            Name = "Euro",
                            Symbol = "€"
                        },
                        new
                        {
                            ISOCode = "USD",
                            Active = true,
                            Decimals = (byte)2,
                            Default = false,
                            Location = "United States",
                            Name = "US dollar",
                            Symbol = "$"
                        },
                        new
                        {
                            ISOCode = "GBP",
                            Active = true,
                            Decimals = (byte)2,
                            Default = true,
                            Location = "United Kingdom",
                            Name = "British pound",
                            Symbol = "£"
                        },
                        new
                        {
                            ISOCode = "CHF",
                            Active = true,
                            Decimals = (byte)2,
                            Default = true,
                            Location = "Switzerland, Liechtenstein",
                            Name = "Swiss franc",
                            Symbol = "Fr."
                        });
                });

            modelBuilder.Entity("Hodl.Api.Domain.CurrencyRate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("CyrrencyISOCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)");

                    b.Property<string>("Source")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("USDPrice")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("CyrrencyISOCode", "TimeStamp");

                    b.ToTable("CurrencyRates");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CyrrencyISOCode = "EUR",
                            Source = "https://nl.iban.com/exchange-rates",
                            TimeStamp = new DateTime(2022, 5, 2, 12, 0, 0, 0, DateTimeKind.Utc),
                            USDPrice = 0.9502m
                        },
                        new
                        {
                            Id = 2L,
                            CyrrencyISOCode = "USD",
                            Source = "https://nl.iban.com/exchange-rates",
                            TimeStamp = new DateTime(2022, 5, 2, 12, 0, 0, 0, DateTimeKind.Utc),
                            USDPrice = 1.0000m
                        },
                        new
                        {
                            Id = 3L,
                            CyrrencyISOCode = "GBP",
                            Source = "https://nl.iban.com/exchange-rates",
                            TimeStamp = new DateTime(2022, 5, 2, 12, 0, 0, 0, DateTimeKind.Utc),
                            USDPrice = 0.7964m
                        },
                        new
                        {
                            Id = 4L,
                            CyrrencyISOCode = "CHF",
                            Source = "https://nl.iban.com/exchange-rates",
                            TimeStamp = new DateTime(2022, 5, 2, 12, 0, 0, 0, DateTimeKind.Utc),
                            USDPrice = 1.0253m
                        });
                });

            modelBuilder.Entity("Hodl.Api.Domain.DailyNav", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("FundId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("ShareGross")
                        .HasColumnType("numeric");

                    b.Property<decimal>("ShareHWM")
                        .HasColumnType("numeric");

                    b.Property<decimal>("ShareNAV")
                        .HasColumnType("numeric");

                    b.Property<int>("TotalShares")
                        .HasColumnType("integer");

                    b.Property<decimal>("TotalValue")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("FundId", "DateTime");

                    b.ToTable("DailyNavs");
                });

            modelBuilder.Entity("Hodl.Api.Domain.Exchange", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ExchangeName")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<byte[]>("Icon")
                        .HasColumnType("bytea");

                    b.Property<string>("Url")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.ToTable("Exchanges");
                });

            modelBuilder.Entity("Hodl.Api.Domain.ExchangeAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AccountKey")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<Guid>("ExchangeId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<Guid>("ParentAccountId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ExchangeId");

                    b.HasIndex("ParentAccountId");

                    b.ToTable("ExchangeAccounts");
                });

            modelBuilder.Entity("Hodl.Api.Domain.Fund", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("FundName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<Guid?>("FundOwnerId")
                        .HasColumnType("uuid");

                    b.Property<string>("LayerStrategy")
                        .HasColumnType("text");

                    b.Property<int>("MaxVolume")
                        .HasColumnType("integer");

                    b.Property<string>("NormalizedFundName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<Guid>("PrimaryCryptoCurrencyId")
                        .HasColumnType("uuid");

                    b.Property<int>("ProfitPercentage")
                        .HasColumnType("integer");

                    b.Property<string>("ReportingCurrencyCode")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)");

                    b.Property<decimal>("ShareValueHWM")
                        .HasColumnType("numeric");

                    b.Property<int>("TotalShares")
                        .HasColumnType("integer");

                    b.Property<decimal>("TotalValue")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("FundOwnerId");

                    b.HasIndex("NormalizedFundName")
                        .IsUnique();

                    b.HasIndex("PrimaryCryptoCurrencyId");

                    b.HasIndex("ReportingCurrencyCode");

                    b.ToTable("Funds");
                });

            modelBuilder.Entity("Hodl.Api.Domain.FundCategory", b =>
                {
                    b.Property<Guid>("FundId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<byte>("MaxPercentage")
                        .HasColumnType("smallint");

                    b.Property<byte>("MinPercentage")
                        .HasColumnType("smallint");

                    b.HasKey("FundId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("FundId", "CategoryId")
                        .IsUnique();

                    b.ToTable("FundCategories");
                });

            modelBuilder.Entity("Hodl.Api.Domain.FundLayer", b =>
                {
                    b.Property<Guid>("FundId")
                        .HasColumnType("uuid");

                    b.Property<byte>("LayerIndex")
                        .HasColumnType("smallint");

                    b.Property<byte>("AimPercentage")
                        .HasColumnType("smallint");

                    b.Property<byte>("AlertRangeHigh")
                        .HasColumnType("smallint");

                    b.Property<byte>("AlertRangeLow")
                        .HasColumnType("smallint");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.HasKey("FundId", "LayerIndex");

                    b.HasIndex("FundId", "LayerIndex");

                    b.ToTable("FundLayers");
                });

            modelBuilder.Entity("Hodl.Api.Domain.FundOwner", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Country")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<string>("Department")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.HasKey("Id");

                    b.ToTable("FundOwners");
                });

            modelBuilder.Entity("Hodl.Api.Domain.Holding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BookingPeriod")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nchar(6)");

                    b.Property<Guid?>("CryptoId")
                        .HasColumnType("uuid");

                    b.Property<string>("CurrencyISOCode")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)");

                    b.Property<decimal>("EndBTCPrice")
                        .HasColumnType("numeric");

                    b.Property<decimal>("EndBalance")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("EndDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("EndPercentage")
                        .HasColumnType("numeric");

                    b.Property<decimal>("EndUSDPrice")
                        .HasColumnType("numeric");

                    b.Property<Guid>("FundId")
                        .HasColumnType("uuid");

                    b.Property<byte>("LayerIndex")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("PeriodClosedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("PreviousHoldingId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("StartBTCPrice")
                        .HasColumnType("numeric");

                    b.Property<decimal>("StartBalance")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("StartPercentage")
                        .HasColumnType("numeric");

                    b.Property<decimal>("StartUSDPrice")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("CryptoId");

                    b.HasIndex("CurrencyISOCode");

                    b.HasIndex("PreviousHoldingId")
                        .IsUnique();

                    b.HasIndex("FundId", "BookingPeriod", "CurrencyISOCode");

                    b.ToTable("Holdings");
                });

            modelBuilder.Entity("Hodl.Api.Domain.Listing", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<decimal>("BTCPrice")
                        .HasColumnType("numeric");

                    b.Property<decimal>("CirculatingSupply")
                        .HasColumnType("numeric");

                    b.Property<int>("CmcRank")
                        .HasColumnType("integer");

                    b.Property<Guid>("CryptoId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("FDMarketCap")
                        .HasColumnType("numeric");

                    b.Property<decimal>("MarketCap")
                        .HasColumnType("numeric");

                    b.Property<decimal>("MarketCapDominance")
                        .HasColumnType("numeric");

                    b.Property<decimal>("MaxSupply")
                        .HasColumnType("numeric");

                    b.Property<int>("NumMarketPairs")
                        .HasColumnType("integer");

                    b.Property<decimal>("PercentChange_1h")
                        .HasColumnType("numeric");

                    b.Property<decimal>("PercentChange_24h")
                        .HasColumnType("numeric");

                    b.Property<decimal>("PercentChange_7d")
                        .HasColumnType("numeric");

                    b.Property<string>("Source")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("TotalSupply")
                        .HasColumnType("numeric");

                    b.Property<decimal>("USDPrice")
                        .HasColumnType("numeric");

                    b.Property<decimal>("VolumeChange_24h")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Volume_24h")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("CryptoId", "TimeStamp");

                    b.ToTable("Listings");
                });

            modelBuilder.Entity("Hodl.Api.Domain.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<decimal>("AveragePrice")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Executed")
                        .HasColumnType("numeric");

                    b.Property<Guid>("FeeCurrencyId")
                        .HasColumnType("uuid");

                    b.Property<string>("PairString")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Side")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Total")
                        .HasColumnType("numeric");

                    b.Property<decimal>("TotalFee")
                        .HasColumnType("numeric");

                    b.Property<string>("Type")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("numeric");

                    b.Property<string>("WalletAddress")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.HasKey("Id");

                    b.HasIndex("FeeCurrencyId");

                    b.HasIndex("WalletAddress");

                    b.HasIndex("PairString", "State");

                    b.HasIndex("PairString", "Type", "DateTime");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Hodl.Api.Domain.OrderFunding", b =>
                {
                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FundId")
                        .HasColumnType("uuid");

                    b.Property<string>("BookingPeriod")
                        .HasMaxLength(6)
                        .HasColumnType("nchar(6)");

                    b.Property<Guid>("FeeCurrencyId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("OrderAmount")
                        .HasColumnType("numeric");

                    b.Property<decimal>("OrderFee")
                        .HasColumnType("numeric");

                    b.Property<decimal>("OrderPercentage")
                        .HasColumnType("numeric");

                    b.Property<decimal>("OrderTotal")
                        .HasColumnType("numeric");

                    b.HasKey("OrderId", "FundId");

                    b.HasIndex("FeeCurrencyId");

                    b.HasIndex("FundId");

                    b.ToTable("OrderFundings");
                });

            modelBuilder.Entity("Hodl.Api.Domain.Pair", b =>
                {
                    b.Property<string>("PairString")
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)");

                    b.Property<Guid>("FromCryptoId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ToCryptoId")
                        .HasColumnType("uuid");

                    b.HasKey("PairString");

                    b.HasIndex("FromCryptoId");

                    b.HasIndex("ToCryptoId");

                    b.ToTable("Pairs");
                });

            modelBuilder.Entity("Hodl.Api.Domain.Trade", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ExchangeAccountId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Executed")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Fee")
                        .HasColumnType("numeric");

                    b.Property<string>("FeeCurrency")
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Total")
                        .HasColumnType("numeric");

                    b.Property<string>("TransactionId")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("ExchangeAccountId");

                    b.HasIndex("OrderId", "ExchangeAccountId", "DateTime");

                    b.ToTable("Trades");
                });

            modelBuilder.Entity("Hodl.Api.Domain.Transfer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BookingPeriod")
                        .HasMaxLength(6)
                        .HasColumnType("nchar(6)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Direction")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("HoldingId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("HoldingId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("OppositeTransferId")
                        .HasColumnType("uuid");

                    b.Property<string>("Reference")
                        .HasColumnType("text");

                    b.Property<string>("TransactionId")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("TransactionSource")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("TransferAmount")
                        .HasColumnType("numeric");

                    b.Property<decimal>("TransferFee")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("HoldingId");

                    b.HasIndex("OppositeTransferId");

                    b.HasIndex("HoldingId", "BookingPeriod", "DateTime");

                    b.ToTable("Transfers");
                });

            modelBuilder.Entity("Hodl.Api.Domain.UserNotification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("DescriptionCode")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("DescriptionMessage")
                        .HasColumnType("text");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uuid");

                    b.Property<string>("EntityTitle")
                        .HasColumnType("text");

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean");

                    b.Property<int>("NotificationType")
                        .HasColumnType("integer");

                    b.Property<string>("OptionalData")
                        .HasColumnType("text");

                    b.Property<string>("OwnerId")
                        .HasColumnType("text");

                    b.Property<long>("Timestamp")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("UserNotifications");
                });

            modelBuilder.Entity("Hodl.Api.Domain.Wallet", b =>
                {
                    b.Property<string>("Address")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid?>("ExchangeAccountId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FundId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Address");

                    b.HasIndex("ExchangeAccountId");

                    b.HasIndex("FundId");

                    b.ToTable("Wallets");
                });

            modelBuilder.Entity("Hodl.Api.Domain.WalletBalance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<decimal>("Balance")
                        .HasColumnType("numeric");

                    b.Property<Guid>("BlockchainNetworkId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CryptoId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("BlockchainNetworkId");

                    b.HasIndex("CryptoId", "BlockchainNetworkId");

                    b.HasIndex("Address", "CryptoId", "BlockchainNetworkId");

                    b.ToTable("WalletBalances");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CryptoCategories", b =>
                {
                    b.HasOne("Hodl.Api.Domain.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("Hodl.Api.Domain.CryptoCurrency", null)
                        .WithMany()
                        .HasForeignKey("CryptoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Hodl.Api.Domain.AppChangeLog", b =>
                {
                    b.HasOne("Hodl.Api.Domain.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Hodl.Api.Domain.BankAccount", b =>
                {
                    b.HasOne("Hodl.Api.Domain.Bank", "Bank")
                        .WithMany("BankAccounts")
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hodl.Api.Domain.Fund", "Fund")
                        .WithMany("BankAccounts")
                        .HasForeignKey("FundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bank");

                    b.Navigation("Fund");
                });

            modelBuilder.Entity("Hodl.Api.Domain.BankBalance", b =>
                {
                    b.HasOne("Hodl.Api.Domain.BankAccount", "BankAccount")
                        .WithMany("Balances")
                        .HasForeignKey("BankAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hodl.Api.Domain.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BankAccount");

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("Hodl.Api.Domain.CurrencyRate", b =>
                {
                    b.HasOne("Hodl.Api.Domain.Currency", "Currency")
                        .WithMany("CurrencyRates")
                        .HasForeignKey("CyrrencyISOCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("Hodl.Api.Domain.DailyNav", b =>
                {
                    b.HasOne("Hodl.Api.Domain.Fund", "Fund")
                        .WithMany("DailyNavs")
                        .HasForeignKey("FundId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Fund");
                });

            modelBuilder.Entity("Hodl.Api.Domain.ExchangeAccount", b =>
                {
                    b.HasOne("Hodl.Api.Domain.Exchange", "Exchange")
                        .WithMany("ExchangeAccounts")
                        .HasForeignKey("ExchangeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hodl.Api.Domain.ExchangeAccount", "ParentAccount")
                        .WithMany("ChildAccounts")
                        .HasForeignKey("ParentAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exchange");

                    b.Navigation("ParentAccount");
                });

            modelBuilder.Entity("Hodl.Api.Domain.Fund", b =>
                {
                    b.HasOne("Hodl.Api.Domain.FundOwner", "FundOwner")
                        .WithMany("Funds")
                        .HasForeignKey("FundOwnerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Hodl.Api.Domain.CryptoCurrency", "PrimaryCryptoCurrency")
                        .WithMany()
                        .HasForeignKey("PrimaryCryptoCurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hodl.Api.Domain.Currency", "ReportingCurrency")
                        .WithMany()
                        .HasForeignKey("ReportingCurrencyCode");

                    b.Navigation("FundOwner");

                    b.Navigation("PrimaryCryptoCurrency");

                    b.Navigation("ReportingCurrency");
                });

            modelBuilder.Entity("Hodl.Api.Domain.FundCategory", b =>
                {
                    b.HasOne("Hodl.Api.Domain.Category", "Category")
                        .WithMany("FundCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hodl.Api.Domain.Fund", "Fund")
                        .WithMany("FundCategories")
                        .HasForeignKey("FundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Fund");
                });

            modelBuilder.Entity("Hodl.Api.Domain.FundLayer", b =>
                {
                    b.HasOne("Hodl.Api.Domain.Fund", "Fund")
                        .WithMany("Layers")
                        .HasForeignKey("FundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fund");
                });

            modelBuilder.Entity("Hodl.Api.Domain.Holding", b =>
                {
                    b.HasOne("Hodl.Api.Domain.CryptoCurrency", "CryptoCurrency")
                        .WithMany("Holdings")
                        .HasForeignKey("CryptoId");

                    b.HasOne("Hodl.Api.Domain.Currency", "Currency")
                        .WithMany("Holdings")
                        .HasForeignKey("CurrencyISOCode");

                    b.HasOne("Hodl.Api.Domain.Fund", "Fund")
                        .WithMany("Holdings")
                        .HasForeignKey("FundId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Hodl.Api.Domain.Holding", "PreviousHolding")
                        .WithOne("NextHolding")
                        .HasForeignKey("Hodl.Api.Domain.Holding", "PreviousHoldingId");

                    b.Navigation("CryptoCurrency");

                    b.Navigation("Currency");

                    b.Navigation("Fund");

                    b.Navigation("PreviousHolding");
                });

            modelBuilder.Entity("Hodl.Api.Domain.Listing", b =>
                {
                    b.HasOne("Hodl.Api.Domain.CryptoCurrency", "CryptoCurrency")
                        .WithMany("Listings")
                        .HasForeignKey("CryptoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CryptoCurrency");
                });

            modelBuilder.Entity("Hodl.Api.Domain.Order", b =>
                {
                    b.HasOne("Hodl.Api.Domain.CryptoCurrency", "FeeCurrency")
                        .WithMany("FeesOrders")
                        .HasForeignKey("FeeCurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hodl.Api.Domain.Pair", "Pair")
                        .WithMany("Orders")
                        .HasForeignKey("PairString");

                    b.HasOne("Hodl.Api.Domain.Wallet", "Wallet")
                        .WithMany("Orders")
                        .HasForeignKey("WalletAddress");

                    b.Navigation("FeeCurrency");

                    b.Navigation("Pair");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("Hodl.Api.Domain.OrderFunding", b =>
                {
                    b.HasOne("Hodl.Api.Domain.CryptoCurrency", "FeeCurrency")
                        .WithMany("FeesOrderFundings")
                        .HasForeignKey("FeeCurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hodl.Api.Domain.Fund", "Fund")
                        .WithMany("OrderFundings")
                        .HasForeignKey("FundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hodl.Api.Domain.Order", "Order")
                        .WithMany("OrderFundings")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FeeCurrency");

                    b.Navigation("Fund");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Hodl.Api.Domain.Pair", b =>
                {
                    b.HasOne("Hodl.Api.Domain.CryptoCurrency", "FromCurrency")
                        .WithMany("FromPairs")
                        .HasForeignKey("FromCryptoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hodl.Api.Domain.CryptoCurrency", "ToCurrency")
                        .WithMany("ToPairs")
                        .HasForeignKey("ToCryptoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FromCurrency");

                    b.Navigation("ToCurrency");
                });

            modelBuilder.Entity("Hodl.Api.Domain.Trade", b =>
                {
                    b.HasOne("Hodl.Api.Domain.ExchangeAccount", "ExchangeAccount")
                        .WithMany("Trades")
                        .HasForeignKey("ExchangeAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hodl.Api.Domain.Order", "Order")
                        .WithMany("Trades")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExchangeAccount");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Hodl.Api.Domain.Transfer", b =>
                {
                    b.HasOne("Hodl.Api.Domain.Holding", "Holding")
                        .WithMany("Transfers")
                        .HasForeignKey("HoldingId");

                    b.HasOne("Hodl.Api.Domain.Transfer", "OppositeTransfer")
                        .WithMany()
                        .HasForeignKey("OppositeTransferId");

                    b.Navigation("Holding");

                    b.Navigation("OppositeTransfer");
                });

            modelBuilder.Entity("Hodl.Api.Domain.Wallet", b =>
                {
                    b.HasOne("Hodl.Api.Domain.ExchangeAccount", "ExchangeAccount")
                        .WithMany("Wallets")
                        .HasForeignKey("ExchangeAccountId");

                    b.HasOne("Hodl.Api.Domain.Fund", "Fund")
                        .WithMany("Wallets")
                        .HasForeignKey("FundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExchangeAccount");

                    b.Navigation("Fund");
                });

            modelBuilder.Entity("Hodl.Api.Domain.WalletBalance", b =>
                {
                    b.HasOne("Hodl.Api.Domain.Wallet", "Wallet")
                        .WithMany("WalletBalances")
                        .HasForeignKey("Address");

                    b.HasOne("Hodl.Api.Domain.BlockchainNetwork", "BlockchainNetwork")
                        .WithMany("WalletBalances")
                        .HasForeignKey("BlockchainNetworkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hodl.Api.Domain.CryptoCurrency", "CryptoCurrency")
                        .WithMany("WalletBalances")
                        .HasForeignKey("CryptoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BlockchainNetwork");

                    b.Navigation("CryptoCurrency");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Hodl.Api.Domain.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Hodl.Api.Domain.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Hodl.Api.Domain.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Hodl.Api.Domain.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hodl.Api.Domain.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Hodl.Api.Domain.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Hodl.Api.Domain.Bank", b =>
                {
                    b.Navigation("BankAccounts");
                });

            modelBuilder.Entity("Hodl.Api.Domain.BankAccount", b =>
                {
                    b.Navigation("Balances");
                });

            modelBuilder.Entity("Hodl.Api.Domain.BlockchainNetwork", b =>
                {
                    b.Navigation("WalletBalances");
                });

            modelBuilder.Entity("Hodl.Api.Domain.Category", b =>
                {
                    b.Navigation("FundCategories");
                });

            modelBuilder.Entity("Hodl.Api.Domain.CryptoCurrency", b =>
                {
                    b.Navigation("FeesOrderFundings");

                    b.Navigation("FeesOrders");

                    b.Navigation("FromPairs");

                    b.Navigation("Holdings");

                    b.Navigation("Listings");

                    b.Navigation("ToPairs");

                    b.Navigation("WalletBalances");
                });

            modelBuilder.Entity("Hodl.Api.Domain.Currency", b =>
                {
                    b.Navigation("CurrencyRates");

                    b.Navigation("Holdings");
                });

            modelBuilder.Entity("Hodl.Api.Domain.Exchange", b =>
                {
                    b.Navigation("ExchangeAccounts");
                });

            modelBuilder.Entity("Hodl.Api.Domain.ExchangeAccount", b =>
                {
                    b.Navigation("ChildAccounts");

                    b.Navigation("Trades");

                    b.Navigation("Wallets");
                });

            modelBuilder.Entity("Hodl.Api.Domain.Fund", b =>
                {
                    b.Navigation("BankAccounts");

                    b.Navigation("DailyNavs");

                    b.Navigation("FundCategories");

                    b.Navigation("Holdings");

                    b.Navigation("Layers");

                    b.Navigation("OrderFundings");

                    b.Navigation("Wallets");
                });

            modelBuilder.Entity("Hodl.Api.Domain.FundOwner", b =>
                {
                    b.Navigation("Funds");
                });

            modelBuilder.Entity("Hodl.Api.Domain.Holding", b =>
                {
                    b.Navigation("NextHolding");

                    b.Navigation("Transfers");
                });

            modelBuilder.Entity("Hodl.Api.Domain.Order", b =>
                {
                    b.Navigation("OrderFundings");

                    b.Navigation("Trades");
                });

            modelBuilder.Entity("Hodl.Api.Domain.Pair", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Hodl.Api.Domain.Wallet", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("WalletBalances");
                });
#pragma warning restore 612, 618
        }
    }
}
